Description: fix screensaver behavior during suspend/hibernate.
 Allow the screensaver to be activated synchronously from cinnamon-session in
 response to suspend/hibernate actions, and ensure it's fully active already
 when resuming.
Origin: upstream, 29bd6e61f2fc7164aca5a73de79135945b692d5b,
        upstream, f3c3d0f9bb7e0fa6210b098ad127999c7d2f12e1
Author: Michael Webster <miketwebster@gmail.com>
Date: Mon, 23 Jan 2017 17:46:20 -0500

---

Index: cinnamon-screensaver/src/service.py
===================================================================
--- cinnamon-screensaver.orig/src/service.py	2017-04-02 12:00:34.079811859 +0200
+++ cinnamon-screensaver/src/service.py	2017-04-02 12:00:34.075811755 +0200
@@ -69,13 +69,32 @@
         self.manager = ScreensaverManager()
         self.manager.connect("active-changed", self.on_active_changed)
 
+        """
+        The stage constructs itself and fades in asynchronously, and most importantly,
+        as an idle callback.  This can cause the screensaver to not be fully active when
+        a call to suspend is made.  Cinnamon-session calls to lock the screensaver
+        synchronously, and if we don't completely finish construction before returning
+        the dbus call completion, there's a chance the idle callback won't run until
+        after the computer is resumed.
+
+        We get an active-changed signal whenever the screensaver becomes completely active
+        or inactive, so we'll queue up running iface.complete_lock() until we receive that signal.
+
+        This allows the screensaver to be fully activated prior to cinnamon-session allowing
+        the suspend/hibernate/whatever process to continue.
+
+        For reference, this is called in cinnamon-session's csm-manager.c "manager_perhaps_lock"
+        method.
+        """
+        self.lock_queue = []
+
         self.interface.export(self.bus, c.SS_PATH)
 
 # Interface handlers
     def handle_lock(self, iface, inv, msg):
         self.manager.lock(msg)
 
-        iface.complete_lock(inv)
+        self.lock_queue.append(inv)
 
         return True
 
@@ -118,4 +137,15 @@
         return True
 
     def on_active_changed(self, manager, state, data=None):
+        GObject.idle_add(self.on_active_changed_idle, state)
+
+    def on_active_changed_idle(self, state):
+        self.lock_queue.reverse()
+
+        while len(self.lock_queue) > 0:
+            invocation = self.lock_queue.pop()
+            self.interface.complete_lock(invocation)
+
+        self.lock_queue = []
+
         self.interface.emit_active_changed(state)
Index: cinnamon-screensaver/src/manager.py
===================================================================
--- cinnamon-screensaver.orig/src/manager.py	2017-04-02 12:00:34.079811859 +0200
+++ cinnamon-screensaver/src/manager.py	2017-04-02 12:00:34.075811755 +0200
@@ -59,7 +59,7 @@
         Initiate locking (activating first if necessary.)
         """
         if not status.Active:
-            if self.set_active(True, msg):
+            if self.set_active(True, True, msg):
                 self.stop_lock_delay()
                 if utils.user_can_lock():
                     status.Locked = True
@@ -76,7 +76,7 @@
         status.Locked = False
         status.Awake = False
 
-    def set_active(self, active, msg=None):
+    def set_active(self, active, immediate=False, msg=None):
         """
         Activates or deactivates the screensaver.  Activation involves:
             - sending a request to Cinnamon to exit Overview or Expo - 
@@ -93,7 +93,11 @@
                 self.cinnamon_client.exit_expo_and_overview()
                 if self.grab_helper.grab_root(False):
                     if not self.stage:
-                        self.spawn_stage(msg, c.STAGE_SPAWN_TRANSITION, self.on_spawn_stage_complete)
+                        if immediate:
+                            transition = 0
+                        else:
+                            transition = c.STAGE_SPAWN_TRANSITION
+                        self.spawn_stage(msg, transition, self.on_spawn_stage_complete)
                     return True
                 else:
                     status.Active = False
Index: cinnamon-screensaver/src/stage.py
===================================================================
--- cinnamon-screensaver.orig/src/stage.py	2017-04-02 12:00:34.079811859 +0200
+++ cinnamon-screensaver/src/stage.py	2017-04-02 12:00:34.075811755 +0200
@@ -79,7 +79,6 @@
         self.override_background_color (Gtk.StateFlags.NORMAL, c);
 
         self.update_geometry()
-        self.set_opacity(0.0)
 
         self.overlay = Gtk.Overlay()
         self.fader = Fader(self)
@@ -135,8 +134,16 @@
         """
         This is the primary way of making the Stage visible.
         """
-        self.realize()
-        self.fader.fade_in(effect_time, callback)
+        if effect_time == 0:
+            self.set_opacity(1.0)
+
+            self.show()
+            callback()
+        else:
+            self.set_opacity(0.0)
+
+            self.realize()
+            self.fader.fade_in(effect_time, callback)
 
     def transition_out(self, effect_time, callback):
         """
